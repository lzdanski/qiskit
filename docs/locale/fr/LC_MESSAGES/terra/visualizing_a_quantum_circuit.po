# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../terra/visualizing_a_quantum_circuit.rst:5
msgid "Visualizing a Quantum Circuit"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:12
msgid "Drawing a Quantum Circuit"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:14
msgid ""
"When building a quantum circuit it often helps to draw the circuit. This "
"is supported natively by a ``QuantumCircuit`` object. You can either just"
" call ``print()`` on the circuit or call the ``draw()`` method on the "
"object. This will render a `ASCII art version "
"<https://en.wikipedia.org/wiki/ASCII_art>`__ of the circuit diagram."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:87
msgid "Alternative Renderers for Circuits"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:89
msgid ""
"While a text output is useful for quickly seeing the output while "
"developing a circuit it doesn’t provide the most flexibility in it’s "
"output. There are 2 other alternative output renderers for the quantum "
"circuit. One uses `matplotlib <https://matplotlib.org/>`__ and the other "
"uses `LaTex <https://www.latex-project.org/>`__ leveraging the `qcircuit "
"package <https://github.com/CQuIC/qcircuit>`__. These can be specified by"
" using ``mpl`` and ``latex`` values for the ``output`` kwarg on the "
"draw() method."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:123
msgid "Controlling output from circuit.draw()"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:125
msgid ""
"By default the draw method returns the rendered image as an object and "
"does not output anything. The exact class returned depends on the output "
"specified: ``'text'``\\ (the default returns a ``TextDrawer`` object, "
"``'mpl'`` returns a ``matplotlib.Figure`` object, and ``latex`` returns a"
" ``PIL.Image`` object. Having the return types enables modifying or "
"directly interacting with the rendered output from the drawers. Jupyter "
"notebooks understand these return types and render it for us in this "
"tutorial, but when running outside of jupyter you do not have this "
"feature automatically. However, the ``draw()`` method has optional "
"arguments to display or save the output. When specified the ``filename`` "
"kwarg takes a path to save the rendered output to. Or if you’re using the"
" ``mpl`` or ``latex`` outputs you can leverage the ``interactive`` kwarg "
"to open the image in a new window (this will not always work from within "
"a notebook but will be demonstrated anyway)."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:141
msgid "Customizing the output"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:143
msgid ""
"Depending on the output there are also options to customize the circuit "
"diagram rendered by the circuit."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:147
msgid "Disable Plot Barriers and Reversing Bit Order"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:149
msgid ""
"The first two options are shared between all 3 backends and they let you "
"configure both the bit orders and whether or not you draw barriers. These"
" can be set by the ``reverse_bits`` kwarg and ``plot_barriers`` kwarg "
"respectively. The examples below will work with any output backend, only "
"``latex`` is used for brevity."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:230
msgid "Backend specific customizations"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:232
msgid ""
"There are also some options available to customize the output diagram "
"which only work for a specific backend. The ``line_length`` kwarg for the"
" ``text`` backend which can be used to set a maximum width for the "
"output. When a diagram is wider than that it will wrap the diagram below."
" The ``mpl`` backend has the ``style`` kwarg which is used to customize "
"the output. The ``scale`` option is used by the ``mpl`` and ``latex`` "
"backends to adjust the size of the output image, it’s a multiplicative "
"adjustment factor used to scale the output size. The ``style`` kwarg "
"takes in a dict with many different options in it. It provides a high "
"level of flexibility and enables things like changing colors, changing "
"rendered text for different types of gates, different line styles, etc. "
"The list of available options for this are:"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:245
msgid ""
"**textcolor** (str): The color code to use for text. Defaults to "
"``'#000000'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:247
msgid ""
"**subtextcolor** (str): The color code to use for subtext. Defaults to "
"``'#000000'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:249
msgid ""
"**linecolor** (str): The color code to use for lines. Defaults to "
"``'#000000'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:251
msgid ""
"**creglinecolor** (str): The color code to use for classical register "
"lines ``'#778899'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:253
msgid "**gatetextcolor** (str): The color code to use for gate text ``'#000000'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:255
msgid ""
"**gatefacecolor** (str): The color code to use for gates. Defaults to "
"``'#ffffff'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:257
msgid ""
"**barrierfacecolor** (str): The color code to use for barriers. Defaults "
"to ``'#bdbdbd'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:259
msgid ""
"**backgroundcolor** (str): The color code to use for the background. "
"Defaults to ``'#ffffff'``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:261
msgid "**fontsize** (int): The font size to use for text. Defaults to 13"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:262
msgid "**subfontsize** (int): The font size to use for subtext. Defaults to 8"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:264
msgid ""
"**displaytext** (dict): A dictionary of the text to use for each element "
"type in the output visualization. The default values are:"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:267
msgid ""
"{ ‘id’: ‘id’, ‘u0’: ‘U_0’, ‘u1’: ‘U_1’, ‘u2’: ‘U_2’, ‘u3’: ‘U_3’, ‘x’: "
"‘X’, ‘y’: ‘Y’, ‘z’: ‘Z’, ‘h’: ‘H’, ‘s’: ‘S’, ‘sdg’: ‘S^\\dagger’, ‘t’: "
"‘T’, ‘tdg’: ‘T^\\dagger’, ‘rx’: ‘R_x’, ‘ry’: ‘R_y’, ‘rz’: ‘R_z’, ‘reset’:"
" ‘\\\\left|0\\right\\rangle’ }"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:272
msgid ""
"You must specify all the necessary values if using this. There is no "
"provision for passing an incomplete dict in."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:274
msgid ""
"**displaycolor** (dict): The color codes to use for each circuit element."
" By default all values default to the value of ``gatefacecolor`` and the "
"keys are the same as ``displaytext``. Also, just like ``displaytext`` "
"there is no provision for an incomplete dict passed in."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:279
msgid ""
"**latexdrawerstyle** (bool): When set to True enable latex mode which "
"will draw gates like the ``latex`` output modes."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:281
msgid "**usepiformat** (bool): When set to True use radians for output"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:282
msgid ""
"**fold** (int): The number of circuit elements to fold the circuit at. "
"Defaults to 20"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:284
msgid "**cregbundle** (bool): If set True bundle classical registers"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:285
msgid "**showindex** (bool): If set True draw an index."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:286
msgid "**compress** (bool): If set True draw a compressed circuit"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:287
msgid "**figwidth** (int): The maximum width (in inches) for the output figure."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:289
msgid "**dpi** (int): The DPI to use for the output image. Defaults to 150"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:290
msgid ""
"**creglinestyle** (str): The style of line to use for classical "
"registers. Choices are ``'solid'``, ``'doublet'``, or any valid "
"matplotlib ``linestyle`` kwarg value. Defaults to ``doublet``"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:413
msgid "Latex Source"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:415
msgid ""
"One additional option available with the latex output type is to return "
"the raw LaTex source code instead of rendering an image for it. This "
"enables easy integration in a seperate LaTex document. To use this you "
"can just set the ``output`` kwarg to ``'latex_source'``. You can also use"
" the ``filename`` kwarg to write this output directly to a file (and "
"still return the string) instead of returning just a string."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:475
msgid "circuit_drawer() as function"
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:477
msgid ""
"If you have an application where you prefer to draw a circuit with a self"
" contained function instead of as a method of a circuit object you can "
"directly use the ``circuit_drawer()`` function, which is part of the "
"public stable interface from ``qiskit.tools.visualization``. The function"
" behaves identically to the ``circuit.draw()`` method except that it "
"takes in a circuit object as required argument."
msgstr ""

#: ../../terra/visualizing_a_quantum_circuit.rst:488
msgid ""
"Note: In Qiskit Terra <= 0.7 the default behavior for the "
"circuit_drawer() function is to use the latex output backend, and in "
"0.6.x that includes a fallback to mpl if latex fails for any reason. But "
"starting in releases > 0.7 the default changes to use the text output."
msgstr ""

