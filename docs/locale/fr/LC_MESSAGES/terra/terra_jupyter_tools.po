# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../terra/terra_jupyter_tools.rst:5
msgid "Jupyter Tools for Terra"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:7
msgid ""
"In this section, we will learn how to monitor the status of jobs "
"submitted to devices and simulators (collectively called backends), as "
"well as discover how to easily query backend details and view the "
"collective state of all the backends available to you."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:13
msgid "Loading the Monitoring Tools"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:15
msgid ""
"First, let us load the default qiskit routines, and register our IBMQ "
"credentials."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:23
msgid "Functions for monitoring jobs and backends are here:"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:29
msgid ""
"If you are running inside a Jupyter notebook, then you will also need to "
"have ``ipywidgets`` version ``7.3.0`` or higher installed. These come "
"pre-installed in Anaconda. There are also Jupyter notebook ‘magics’ "
"available for each of the abover functions. The following will register "
"those magics, making them ready for use."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:40
msgid "Tracking Job Status"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:42
msgid ""
"Many times a job(s) submitted to the IBM Q network can take a long time "
"to process, e.g. jobs with many circuits and/or shots, or may have to "
"wait in queue for other users. In situations such as these, it is "
"beneficial to have a way of monitoring the progress of a job, or several "
"jobs at once. As of Qiskit ``0.6+`` it is possible to monitor the status "
"of a job in a Jupyter notebook, and also in a Python script (verision "
"``0.7+``)."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:50
msgid "Lets see how to make use of these tools."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:53
msgid "Monitoring the status of a single job"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:55
msgid ""
"Lets build a simple Bell circuit, submit it to a device, and then monitor"
" its status."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:68
msgid "Lets grab the least busy backend"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:85
msgid ""
"Monitor the job using ``job_monitor`` in blocking-mode (i.e. using the "
"same thread as the Python interpretor)"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:100
msgid ""
"Monitor the job using ``job_monitor`` in async-mode (Jupyter notebooks "
"only). The job will be monitored in a separate thread, allowing you to "
"continue to work in the notebook."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:116
msgid ""
"It is also possible to monitor the job using the ``qiskit_job_status`` "
"Jupyter notebook magic. This method is always asyncronous."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:131
msgid ""
"Note that, for the ``qiskit_job_status`` to work, the job returned by "
"``execute`` must be stored in a variable so that it may be retrieved by "
"the magic."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:136
msgid "Monitoring many jobs simultaneously"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:138
msgid ""
"Here we will monitor many jobs sent the the device. It is if the jobs are"
" stored in a list to make retrevial easier."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:180
msgid "Or, using magic:"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:196
msgid ""
"In the magics example, the magic is smart enough to know that the list "
"``my_jobs2`` contains jobs, and will automatically extract them and check"
" their status. We are not limited to using ``jobs.append()``, and can use"
" an indexed list or NumPy array as well:"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:217
msgid "Changing the interval of status updating"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:219
msgid ""
"By default, the interval at which the job status is checked is every two "
"seconds. However, the user is free to change this using the ``interval`` "
"keyword argument in ``job_monitor``"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:235
msgid "and the ``-i`` or ``--interval`` arguments to the Jupyter magic."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:262
msgid "Backend Details"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:264
msgid ""
"So far we have been executing our jobs on a backend, but we have explored"
" the backends in any detail. For example, we have found the least busy "
"backend, but do not know if this is the best backend with respect to gate"
" errors, topology etc. It is possible to get detailed information for a "
"single backend by calling ``backend_monitor``:"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:322
msgid ""
"Or, if we are interested in a higher-level view of all the backends "
"available to us, then we can use ``backend_overview()``"
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:345
msgid ""
"There are also Jupyter magic equivalents that give more detailed "
"information."
msgstr ""

#: ../../terra/terra_jupyter_tools.rst:358
msgid ""
"The Jupyter ``backend_overview`` runs live in the notebook, and will "
"automatically update itself every minute."
msgstr ""

