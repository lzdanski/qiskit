# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../aqua/oracles.rst:5
msgid "Oracles"
msgstr ""

#: ../../aqua/oracles.rst:7
msgid ""
"An oracle is a black box operation used as input to another algorithm. "
"They tend to encode a function :math:`f:\\{0,1\\}^n \\rightarrow "
"\\{0,1\\}^m` where the goal of the algorithm is to determine some "
"property of :math:`f`."
msgstr ""

#: ../../aqua/oracles.rst:11
msgid "The following quantum oracles are included in Aqua:"
msgstr ""

#: ../../aqua/oracles.rst:13
msgid ":ref:`SATisfiability Grover Oracle`"
msgstr ""

#: ../../aqua/oracles.rst:14
msgid ":ref:`Deutsch-Jozsa Oracle`"
msgstr ""

#: ../../aqua/oracles.rst:15
msgid ":ref:`Bernstein-Vazirani Oracle`"
msgstr ""

#: ../../aqua/oracles.rst:16
msgid ":ref:`Simon Oracle`"
msgstr ""

msgid "Extending the Oracle Library"
msgstr ""

#: ../../aqua/oracles.rst:20
msgid ""
"Consistent with its unique design, Aqua has a modular and extensible "
"architecture. Algorithms and their supporting objects, such as oracles "
"for Grover's Search Algorithm, are pluggable modules in Aqua."
msgstr ""

#: ../../aqua/oracles.rst:24
msgid ""
"New oracles are typically installed in the "
"``qiskit_aqua/components/oracles`` folder and derive from the ``Oracle`` "
"class. Aqua also allows for :ref:`aqua-dynamically-discovered-"
"components`: new components can register themselves as Aqua extensions "
"and be dynamically discovered at run time independent of their location "
"in the file system. This is done in order to encourage researchers and "
"developers interested in :ref:`aqua-extending` to extend the Aqua "
"framework with their novel research contributions."
msgstr ""

#: ../../aqua/oracles.rst:34
msgid ""
":ref:`aqua-extending` provides more details on how to extend Aqua with "
"new components."
msgstr ""

#: ../../aqua/oracles.rst:39
msgid ""
"Each of the quantum oracles is created to be used with their respective "
":ref:`quantum-algorithms`."
msgstr ""

#: ../../aqua/oracles.rst:47
msgid "SATisfiability Grover Oracle (SAT)"
msgstr ""

#: ../../aqua/oracles.rst:49
msgid ""
":ref:`grover` is a well known quantum algorithm for searching through "
"unstructured collections of records for particular targets with quadratic"
" speedup compared to classical algorithms."
msgstr ""

#: ../../aqua/oracles.rst:53
msgid ""
"Given an input :math:`x` in set :math:`X` of :math:`N` elements "
":math:`X=\\{x_1,x_2,\\ldots,x_N\\}`, the Grover oracle implements the "
"boolean function :math:`f : X \\rightarrow \\{0,1\\}`, such that "
":math:`f(x^*)=1` for :math:`x^* \\in X` and :math:`0` otherwise."
msgstr ""

#: ../../aqua/oracles.rst:58
msgid ""
"Currently, Aqua provides the SATisfiability (SAT) oracle implementation, "
"which takes as input an SAT problem specified as a formula in "
"`Conjunctive Normal Form (CNF) "
"<https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and searches "
"for solutions to that problem. A CNF is a conjunction of one or more "
"clauses, where a clause is a disjunction of one or more literals:"
msgstr ""

#: ../../aqua/oracles.rst:68
msgid ""
"The Aqua SAT oracle implementation expects a CNF to be a ``str`` value "
"assigned to the ``cnf`` parameter.  The value must be encoded in `DIMACS "
"CNF format <http://www.satcompetition.org/2009/format-"
"benchmarks2009.html>`__. Once it receives a CNF as an input, the SAT "
"oracle constructs the corresponding quantum search circuit for Grover's "
"Search Algorithm to operate upon."
msgstr ""

#: ../../aqua/oracles.rst:75
msgid ""
"Internally, SAT relies on ``mct``, the Multiple-Control Toffoli "
"operation, for circuit construction. Aqua includes three different modes "
"for ``mct``, namely ``'basic'``, ``'advanced'``, and ``'noancilla'``:"
msgstr ""

#: ../../aqua/oracles.rst:83
msgid ""
"More information on ``mct`` and its three modes can be found at "
":ref:`mct`."
msgstr ""

#: ../../aqua/oracles.rst:85
msgid "The following is an example of a CNF expressed in DIMACS CNF format:"
msgstr ""

#: ../../aqua/oracles.rst:97
msgid ""
"The first line, following the ``c`` character, is a comment. The second "
"line specifies that the CNF is over three boolean variables --- let us "
"call them :math:`x_1, x_2, x_3`, and contains five clauses.  The five "
"clauses, listed afterwards, are implicitly joined by the logical ``AND`` "
"operator, :math:`\\land`, while the variables in each clause, represented"
" by their indices, are implicitly disjoined by the logical ``OR`` "
"operator, :math:`lor`. The :math:`-` symbol preceding a boolean variable "
"index corresponds to the logical ``NOT`` operator, :math:`lnot`.  "
"Character ``0`` marks the end of each clause.  Essentially, the code "
"above corresponds to the following CNF: :math:`(\\lnot x_1 \\lor \\lnot "
"x_2 \\lor \\lnot x_3) \\land (x_1 \\lor \\lnot x_2 \\lor x_3) \\land (x_1"
" \\lor x_2 \\lor \\lnot x_3) \\land (x_1 \\lor \\lnot x_2 \\lor \\lnot "
"x_3) \\land (\\lnot x_1 \\lor x_2 \\lor x_3)`."
msgstr ""

#: ../../aqua/oracles.rst:112
msgid ""
"Examples showing how to use the Grover algorithm in conjunction with the "
"SAT oracles to search for solutions to SAT problems are available in the "
"``optimization`` folder of the `Qiskit Tutorials GitHub repository "
"<https://github.com/Qiskit/qiskit-"
"tutorials/tree/master/community/aqua>`__."
msgstr ""

msgid "Declarative Name"
msgstr ""

#: ../../aqua/oracles.rst:119
msgid ""
"When referring to the SAT oracle declaratively inside Aqua, its code "
"``name``, by which Aqua dynamically discovers and loads it, is ``SAT``."
msgstr ""

#: ../../aqua/oracles.rst:126
msgid "Deutsch-Jozsa Oracle"
msgstr ""

#: ../../aqua/oracles.rst:128
msgid ""
"The Deutsch-Jozsa oracle implements a function :math:`f:\\{0,1\\}^n "
"\\rightarrow \\{0,1\\}`. The function must be either balanced (0 for half"
" the ouputs and 1 for the other half) or constant (0 for all outputs or 1"
" for all outputs)."
msgstr ""

#: ../../aqua/oracles.rst:133 ../../aqua/oracles.rst:165
#: ../../aqua/oracles.rst:202
msgid ""
"The oracle takes as a dictionary as input that contains the bitmap of "
":math:`f(x)` on all length :math:`n` bitstrings."
msgstr ""

#: ../../aqua/oracles.rst:140
msgid ""
"The following is an example of a bitmap dictionary representing a "
"balanced 3-bit function:"
msgstr ""

#: ../../aqua/oracles.rst:150
msgid ""
"When referring to the Deutsch-Jozsa oracle declaratively inside Aqua, its"
" code ``name``, by which Aqua dynamically discovers and loads it, is "
"``DeutschJozsaOracle``."
msgstr ""

#: ../../aqua/oracles.rst:159
msgid "Bernstein-Vazirani Oracle"
msgstr ""

#: ../../aqua/oracles.rst:161
msgid ""
"The Bernstein-Vazirani oracle implements a function :math:`f:\\{0,1\\}^n "
"\\rightarrow \\{0,1\\}`, such that :math:`f(x)=s \\cdot x (\\bmod 2)` for"
" some :math:`s \\in \\{0,1\\}^n`."
msgstr ""

#: ../../aqua/oracles.rst:172
msgid ""
"The following is an example of a bitmap dictionary representing a 3-bit "
"function where :math:`s = 101`:"
msgstr ""

#: ../../aqua/oracles.rst:182
msgid ""
"When referring to the Bernstein-Vazirani oracle declaratively inside "
"Aqua, its code ``name``, by which Aqua dynamically discovers and loads "
"it, is ``BernsteinVaziraniOracle``."
msgstr ""

#: ../../aqua/oracles.rst:190
msgid "Simon Oracle"
msgstr ""

#: ../../aqua/oracles.rst:192
msgid ""
"The Simon oracle implements a function :math:`f:\\{0,1\\}^n \\rightarrow "
"\\{0,1\\}^n`, such that either:"
msgstr ""

#: ../../aqua/oracles.rst:195
msgid ":math:`f` is one-to-one (a permuation), or"
msgstr ""

#: ../../aqua/oracles.rst:196
msgid ""
":math:`f` is two-to-one where :math:`f(\\mathbf{x}) = f(\\mathbf{y}) "
"\\Leftrightarrow \\mathbf{y} \\oplus \\mathbf{x} = \\mathbf{s}`."
msgstr ""

#: ../../aqua/oracles.rst:200
msgid ""
"Note that (1) is a special case of (2) with :math:`\\mathbf{s} = "
"\\mathbf{0}`."
msgstr ""

#: ../../aqua/oracles.rst:209
msgid ""
"The following is an example of a bitmap dictionary representing a 3-bit "
"function where :math:`s = 110`:"
msgstr ""

#: ../../aqua/oracles.rst:219
msgid ""
"When referring to the Simon oracle declaratively inside Aqua, its code "
"``name``, by which Aqua dynamically discovers and loads it, is "
"``SimonOracle``."
msgstr ""

