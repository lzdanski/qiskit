# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../aqua/iqfts.rst:5
msgid "Inverse Quantum Fourier Transforms"
msgstr ""

#: ../../aqua/iqfts.rst:7
msgid ""
"In quantum computing, a Quantum Fourier Transform (QFT) is a linear "
"transformation on quantum bits, and is the quantum analogue of the "
"discrete Fourier transform. QFT is a part of many quantum algorithms, "
"such as Shor's algorithm for factoring and computing the discrete "
"logarithm, and the :ref:`QPE` algorithm for estimating the eigenvalues of"
" a unitary operator. A QFT can be performed efficiently on a quantum "
"computer, with a particular decomposition into a product of simpler "
"unitary matrices. `It has been shown "
"<http://csis.pace.edu/ctappert/cs837-18spring/QC-textbook.pdf>`__ how, "
"using a simple decomposition, the discrete Fourier transform on "
":math:`2^n` amplitudes can be implemented as a quantum circuit consisting"
" of only :math:`O(n^2)` Hadamard gates and controlled phase shift gates, "
"where :math:`n` is the number of qubits, in contrast with the classical "
"discrete Fourier transform, which takes :math:`O(n2^n)` gates, where in "
"the classical case :math:`n` is the number of bits. `The best quantum "
"Fourier transform algorithms currently known "
"<https://pdfs.semanticscholar.org/deff/d6774d409478734db5f92011ff66bebd4a05.pdf>`__"
" require only :math:`O(n\\log n)` gates to achieve an efficient "
"approximation."
msgstr ""

#: ../../aqua/iqfts.rst:24
msgid ""
"Most of the properties of the QFT follow from the fact that it is a "
"unitary transformation. This implies that, if :math:`F` is the matrix "
"representing the QFT, then :math:`FF^\\dagger = F^{\\dagger}F=I`, where "
":math:`F^\\dagger` is the Hermitian adjoint of :math:`F` and :math:`I` is"
" the identity matrix. It follows that :math:`F^{-1} = F^\\dagger`. Since "
"there is an efficient quantum circuit implementing the QFT, the circuit "
"can be run in reverse to perform the Inverse Quantum Fourier Transform "
"(IQFT). Thus, both transforms can be efficiently performed on a quantum "
"computer."
msgstr ""

#: ../../aqua/iqfts.rst:33
msgid ""
"As mentioned above, the :ref:`QPE` algorithm uses the QFT for estimating "
"the eigenvalues of a unitary operator.  More precisely, QPE uses the "
"Inverse Quantum Fourier Transform (IQFT).  IQFTs in Aqua are pluggable "
"objects.  Among the IQFTs provided by Aqua, the user can choose which "
"IQFT to use when instantiating QPE or any other algorithm that requires "
"the use of an IQFT.  Furthermore, researchers interested in contributing "
"new algorithms to Aqua can plug their own IQFT implementation."
msgstr ""

msgid "Extending the IQFT Library"
msgstr ""

#: ../../aqua/iqfts.rst:42
msgid ""
"Consistent with its unique  design, Aqua has a modular and extensible "
"architecture. Algorithms and their supporting objects, such as IQFTs, are"
" pluggable modules in Aqua. This is done in order to encourage "
"researchers and developers interested in :ref:`aqua-extending` to extend "
"the Aqua framework with their novel research contributions. New IQFTs are"
" typically installed in the ``qiskit_aqua/utils/iqfts`` folder and derive"
" from the ``IQFT`` class.  Aqua also allows for :ref:`aqua-dynamically-"
"discovered-components`: new IQFTs can register themselves as Aqua "
"extensions and be dynamically discovered at run time independent of their"
" location in the file system."
msgstr ""

#: ../../aqua/iqfts.rst:53
msgid "Aqua comes with two IQFTs:"
msgstr ""

#: ../../aqua/iqfts.rst:55
msgid "`Standard IQFT <#standard-iqft>`__"
msgstr ""

#: ../../aqua/iqfts.rst:56
msgid "`Approximate IQFT <#approximate-iqft>`__"
msgstr ""

#: ../../aqua/iqfts.rst:58
msgid ""
"The ``iqft`` section in the :ref:`aqua-input-file` becomes relevant only "
"for algorithms that require an IQFT.  This is reflected also in the :ref"
":`aqua-gui`, which enables the ``iqft`` section for the IQFT "
"configuration only when an algorithm requiring an IQFT is selected.  When"
" the ``iqft`` section is indeed enabled, then the user can choose which "
"IQFT to apply by assigning a ``str`` value to the ``name`` field of the "
"``iqft`` section."
msgstr ""

#: ../../aqua/iqfts.rst:67
msgid "Standard IQFT"
msgstr ""

#: ../../aqua/iqfts.rst:69
msgid ""
"The standard version of the IQFT is simply the inverse of a plain QFT. It"
" generates the inverse of a QFT circuit with no approximation. The "
"standard IQFT takes no parameters and is not configurable."
msgstr ""

msgid "Declarative Name"
msgstr ""

#: ../../aqua/iqfts.rst:75
msgid ""
"When referring to the standard IQFT declaratively inside Aqua, its code "
"``name``, by which Aqua dynamically discovers and loads it, is "
"``STANDARD``."
msgstr ""

#: ../../aqua/iqfts.rst:80
msgid "Approximate IQFT"
msgstr ""

#: ../../aqua/iqfts.rst:82
msgid ""
"This form of IQFT generates the inverse of an Approximate Quantum Fourier"
" Transform (AQFT) as described in `arXiv:1803.04933 "
"<https://arxiv.org/abs/1803.04933>`__. The degree of approximation can be"
" configured using the following parameter:"
msgstr ""

#: ../../aqua/iqfts.rst:91
msgid ""
"This parameter controls the level of approximation of the IQFT, expressed"
" as a non-negative ``int`` value. The value provided will reduce the "
"depth of neighbor terms allowed in the IQFT circuit. The default value is"
" ``0``, which results in no approximation --- in which case the resulting"
" IQFT is exactly the same as the `standard IQFT <#standard-iqft>`__. Each"
" value above ``0``, however , reduces by the corresponding amount the "
"range of the neighbor terms allowed, which in turn reduces the circuit "
"complexity."
msgstr ""

#: ../../aqua/iqfts.rst:102
msgid ""
"When referring to the approximate IQFT declaratively inside Aqua, its "
"code ``name``, by which Aqua dynamically discovers and loads it, is "
"``APPROXIMATE``."
msgstr ""

