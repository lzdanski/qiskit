# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../aqua/uncertainty_problems.rst:5
msgid "Uncertainty Problems"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:7
msgid ""
"Uncertainty is present in most realistic applications, and often it is "
"necessary to evaluate the behavior of a system under uncertain data. For "
"instance, in finance, it is of interest to evaluate expected value or "
"risk metrics of financial products that depend on underlying stock "
"prices, economic factors, or changing interest rates. Classically, such "
"problems are often evaluated using Monte Carlo simulation. However, Monte"
" Carlo simulation does not converge very fast, which implies that large "
"numbers of samples are required to achieve estimators of reasonable "
"accuracy and confidence. In quantum computing, *amplitude estimation* can"
" be used instead, which can lead to a quadratic speed-up. Thus, millions "
"of classical samples could be replaced by a few thousand quantum samples."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:17
msgid ""
"*Amplitude estimation* is a derivative of *quantum phase estimation* "
"applied to a particular operator :math:`A`. :math:`A` is assumed to "
"operate on (n+1) qubits (+ possible ancillas) where the n qubits "
"represent the uncertainty (random distribution "
":ref:`random_distribution`) and the last qubit is used to represent the "
"(normalized) objective value as its amplitude. In other words, :math:`A` "
"is constructed such that the probability of measuring a '1' in the "
"objective qubit is equal to the value of interest. An implementation of "
"an uncertainty problem is assumed to provide a dictionary with parameter,"
" particularly containing the index of the qubit used for the objective:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:33
msgid ""
"Since the value of interest has to be normalized to lie in [0, 1], an "
"uncertainty problem also provides a function:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:40
msgid ""
"which is used to map the result of *amplitude estimation* to the range of"
" interest. The standard implementation is just the identity and can be "
"overridden when needed."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:43
msgid ""
"In the following, we introduce the available implementations of this "
"class."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:47
msgid "European Call Option"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:51
msgid ""
"Suppose a European call option with strike price :math:`K` and an "
"underlying asset whose spot price at maturity :math:`S_T` follows a given"
" random distribution. The corresponding payoff function is defined as "
":math:`\\max \\{ S - K, 0 \\}`."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:55
msgid ""
"The *European call option - expected value* uncertainty problem takes the"
" following input parameters:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:57
#: ../../aqua/uncertainty_problems.rst:86
msgid "univariate random distribution for spot price (:ref:`random_distribution`)"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:58
msgid "strike price :math:`K`"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:59
#: ../../aqua/uncertainty_problems.rst:123
msgid ""
"approximation scaling parameter :math:`c_{approx}` which specifies how "
"well the objective function is approximated (needs to be synced with the "
"number of evaluation qubits in amplitude estimation). For more details on"
" the approximation, see https://arxiv.org/abs/1806.06893."
msgstr ""

msgid "Delta"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:81
msgid ""
"The $\\Delta$, of an option is defines as the derivative of the expected "
"payfoff (respectively the price) with respect to the spot price. For an "
"European call option it can be defined as :math:`\\Delta = P\\left[ S_T "
"\\geq K \\right]`."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:84
msgid ""
"The *European call option - Delta* uncertainty problem takes the "
"following input parameters:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:87
msgid "the strike price :math:`K`"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:96
msgid ""
"Note that - in contrast to the expected value - the approximation scaling"
" is not required here."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:100
msgid "Fixed-Income Asset Pricing"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:104
msgid ""
"Here, we seek to price a fixed-income asset knowing the distributions "
"describing the relevant interest rates. The cash flows :math:`c_t` of the"
" asset and the dates at which they occur are known. The total value "
":math:`V` of the asset is thus the expectation value of:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:108
msgid "V = \\sum_{t=1}^T \\frac{c_t}{(1+r_t)^t}"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:112
msgid ""
"Each cash flow is treated as a zero coupon bond with a corresponding "
"interest rate :math:`r_t` that depends on its maturity. The user must "
"specify the distribution modelling the uncertainty in each :math:`r_t` "
"(possibly correlated) as well as the number of qubits he wishes to use to"
" sample each distribution. In this example we expand the value of the "
"asset to first order in the interest rates :math:`r_t`. This corresponds "
"to studying the asset in terms of its duration."
msgstr ""

#: ../../aqua/uncertainty_problems.rst:118
msgid ""
"The *Fixed-Income - Expected Value* uncertainty problem takes the "
"following parameters:"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:120
msgid "multivariate random distribution: :math:`u`"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:121
msgid ""
"affine map from the random distribution to interest rates (e.g. from a "
"principal component analysis): :math:`A`, :math:`b`"
msgstr ""

#: ../../aqua/uncertainty_problems.rst:122
msgid "cash flow: :math:`c`"
msgstr ""

