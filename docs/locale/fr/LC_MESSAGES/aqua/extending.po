# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-31 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../aqua/extending.rst:5
msgid "Contributing to Aqua"
msgstr ""

#: ../../aqua/extending.rst:7
msgid ""
"Aqua has a modular and extensible architecture. Instead of just "
"*accessing* Aqua as a library of quantum algorithms to experiment with "
"quantum computing, a user may decide to *contribute* to Aqua by providing"
" new algorithms and algorithm components. These can be programmatically "
"added to Aqua, which was designed as an extensible, pluggable framework."
msgstr ""

msgid "Contribution Guidelines"
msgstr ""

#: ../../aqua/extending.rst:17
msgid ""
"Any user who would like to contribute to Aqua should follow the Aqua "
"`contribution guidelines "
"<https://github.com/QISKit/aqua/blob/master/.github/CONTRIBUTING.rst>`__."
msgstr ""

#: ../../aqua/extending.rst:20
msgid ""
"Aqua exposes numerous extension points. Researchers and developers can "
"contribute to Aqua by providing new components, which will be "
"automatically discovered and loaded by Aqua at run time."
msgstr ""

#: ../../aqua/extending.rst:27
msgid "Dynamically Discovered Components"
msgstr ""

#: ../../aqua/extending.rst:29
msgid ""
"Each component should derive from the corresponding base class, as "
"explained below.  There are two ways for a component to be dynamically "
"discovered and loaded by Aqua at run time:"
msgstr ""

#: ../../aqua/extending.rst:32
msgid ""
"The class implementing the component should be placed in the appropriate "
"folder in the file system, as explained in `Section \"Aqua Extension "
"Points\" <#aqua-extension-points>`__ below for each different component "
"type. This is the easiest approach.  Researchers and developers extending"
" Aqua are more likely to have installed Aqua by cloning the `Aqua "
"repository <https://github.com/Qiskit/aqua>`__ as opposed to using the "
"pip package manager system.  Therefore, the folders indicated below can "
"be easily located in the file system."
msgstr ""

#: ../../aqua/extending.rst:39
msgid ""
"Alternatively, a developer extending Aqua with a new component can simply"
" create a dedicated repository with its own versioning.  This repository "
"must be locally installable with the package that was created. It simply "
"consists of customizing the ``setup.py`` adding the entry points for "
"``qiskit.aqua.pluggables`` as shown below. The format is: ``anyname = "
"full_package:class_name``. Each class must be included separately. When "
"someone installs the package, the extensions will be automatically "
"registered:"
msgstr ""

#: ../../aqua/extending.rst:94
msgid ""
"All the classes implementing the algorithms and the supporting components"
" listed below should embed a configuration dictionary including ``name``,"
" ``description`` and ``input_schema`` properties."
msgstr ""

#: ../../aqua/extending.rst:99
msgid "Aqua Extension Points"
msgstr ""

#: ../../aqua/extending.rst:101
msgid ""
"This section details the algorithm and algorithm components that "
"researchers and developers interested in quantum algorithms can "
"contribute to Aqua."
msgstr ""

#: ../../aqua/extending.rst:108
msgid "Algorithms"
msgstr ""

#: ../../aqua/extending.rst:110
msgid ""
"New :ref:`quantum-algorithms` may be developed according to the specific "
"API provided by Aqua. By simply adding the code of an algorithm to the "
"collection of existing algorithms, that new algorithm will be immediately"
" recognized via dynamic lookup, and made available for use within the "
"framework of Aqua. To develop and deploy any new algorithm, the new "
"algorithm class should derive from the ``QuantumAlgorithm`` class. Along "
"with all of its supporting modules, the new algorithm class should be "
"installed under a suitable folder in the ``qiskit_aqua\\algorithms`` "
"directory, just like the existing algorithms, unless the dynamic-"
"discovery approach has been chosen, in which case the algorithm can "
"register itself as an Aqua algorithm irrespective of its installation "
"folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:123
msgid "Optimizers"
msgstr ""

#: ../../aqua/extending.rst:125
msgid ""
"New `optimizers <#optimizers>`__ for quantum variational algorithms "
"should and derive from the ``Optimizer`` class.  They should also be "
"installed in the ``qiskit_aqua/components/optimizers`` folder of the "
"``aqua`` repository clone, unless the dynamic-discovery approach has been"
" chosen, in which case a new optimizer can register itself as an Aqua "
"optimizer irrespective of its installation folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:137
msgid "Variational Forms"
msgstr ""

#: ../../aqua/extending.rst:139
msgid ""
"`Trial wave functions <#variational_forms>`__ for quantum variational "
"algorithms, such as `VQE <#variational-quantum-eigensolver-vqe>`__ must "
"derive from the ``VariationalForm`` class. They should also be installed "
"under the ``qiskit_aqua/components/variational_forms`` folder unless the "
"dynamic-discovery approach has been chosen, in which case a new trial "
"wave function can register itself as an Aqua variational form "
"irrespective of its installation folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:150
msgid "Oracles"
msgstr ""

#: ../../aqua/extending.rst:152
msgid ""
"`Oracles <#oracles>`__, for use with algorithms such as `Grover's search "
"<#quantum-grover-search>`__, should derive from the ``Oracle`` class.  "
"They should also go under the ``qiskit_aqua/components/oracles`` folder, "
"unless the dynamic-discovery approach has been chosen, in which case a "
"new oracle can register itself as an Aqua oracle irrespective of its "
"installation folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:163
msgid "Inverse Quantum Fourier Transforms (IQFTs)"
msgstr ""

#: ../../aqua/extending.rst:165
msgid ""
"`IQFTs <#iqfts>`__, for use for example for `QPE <#quantum-phase-"
"estimation-qpe>`__, must derive from the ``IQFT`` class. They should also"
" be installed  under the ``qiskit_aqua/components/iqfts`` folder, unless "
"the dynamic-discovery approach has been chosen, in which case a new IQFT "
"can register itself as an Aqua IQFT irrespective of its installation "
"folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:175
msgid "Initial States"
msgstr ""

#: ../../aqua/extending.rst:177
msgid ""
"`Initial states <#initial_states>`__, for algorithms such as `VQE "
"<#variational-quantum-eigensolver-vqe>`__, `QPE <#quantum-phase-"
"estimation-qpe>`__ and `IQPE <#iterative-quantum-phase-estimation-"
"iqpe>`__, must derive from the ``InitialState`` class. They should also "
"be installed under the ``qiskit_aqua/components/initial_states`` folder, "
"unless the dynamic-discovery approach has been chosen, in which case a "
"new initial state can register itself as an Aqua initial state "
"irrespective of its installation folder in the file system."
msgstr ""

#: ../../aqua/extending.rst:187
msgid "Aqua Documentation UI"
msgstr ""

#: ../../aqua/extending.rst:188
msgid ""
"Researchers and developers interested in extending Aqua with new "
"algorithms and computational components can access the :ref:`aqua-doc-"
"ui`, which offers a quick and succinct overview of all the extensible "
"components along with their configuration schemas."
msgstr ""

#: ../../aqua/extending.rst:195
msgid "Aqua Unit Tests"
msgstr ""

#: ../../aqua/extending.rst:197
msgid ""
"Contributing new software components to Aqua requires writing new unit "
"tests for those components, and executing all the existing unit tests to "
"make sure that no bugs were inadvertently injected."
msgstr ""

#: ../../aqua/extending.rst:204
msgid ""
"Unit tests should go under the ``test`` folder and be classes derived "
"from the ``QiskitAquaTestCase`` class.  They should not have ``print`` "
"statements; rather, they should use ``self.log.debug``. If they use "
"assertions, these should be from the ``unittest`` package, such as "
"``self.AssertTrue``, ``self.assertRaises``, etc."
msgstr ""

#: ../../aqua/extending.rst:213
msgid "To run all unit tests, execute the following command:"
msgstr ""

#: ../../aqua/extending.rst:219
msgid ""
"To run a particular unit test module, the following command should be "
"used:"
msgstr ""

#: ../../aqua/extending.rst:225
msgid "The command for help is as follows:"
msgstr ""

#: ../../aqua/extending.rst:232
msgid ""
"`Other running options <https://docs.python.org/3/library/unittest.html"
"#command-line-options>`__ are available to users for consultation."
msgstr ""

#: ../../aqua/extending.rst:235
msgid ""
"In order to see unit test log messages, researchers and developers "
"contributing to Aqua will need to set the ``LOG_LEVEL`` environment "
"variable to ``DEBUG`` mode:"
msgstr ""

#: ../../aqua/extending.rst:243
msgid ""
"The results from ``self.log.debug`` will be saved to a file with same "
"name as the module used to run, and with a ``log`` extension. For "
"instance, the ``test_end2end.py`` script in the example above will "
"generate a log file named ``test_end2end.log`` in the ``test`` folder."
msgstr ""

